datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  collections      Collection[]
  coverImage       String?
  createdAt        DateTime      @default(now())
  customAttributes Json?
  deletedAt        DateTime?
  description      String?
  disabledAt       DateTime?
  displayImage     String?
  displayName      String?
  email            String?
  firstName        String?
  id               String        @id @default(cuid())
  item             Item[]
  lastName         String?
  password         String
  roles            String[]
  transactions     Transaction[]
  updatedAt        DateTime      @updatedAt
  username         String        @unique
}

model Collection {
  collectionSymbol String?
  contractAddress  String?
  coverImage       String?
  createdAt        DateTime                    @default(now())
  customAttributes Json?
  deletedAt        String?
  description      String?
  displayImage     String?
  displayName      String?
  id               String                      @id @default(cuid())
  isLogical        Boolean?
  items            Item[]
  listedAt         DateTime?
  name             String?
  network          Network?                    @relation(fields: [networkId], references: [id])
  networkId        String?
  owner            User[]
  protocolType     EnumCollectionProtocolType?
  updatedAt        DateTime                    @updatedAt
}

model Item {
  collection   Collection?   @relation(fields: [collectionId], references: [id])
  collectionId String?
  createdAt    DateTime      @default(now())
  id           String        @id @default(cuid())
  metadata     String?
  owner        User[]
  tokenId      String?
  transactions Transaction[]
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  createdAt          DateTime                        @default(now())
  currency           Currency?                       @relation(fields: [currencyId], references: [id])
  currencyId         String?
  data               String?
  deletedAt          DateTime?
  endTime            DateTime?
  id                 String                          @id @default(cuid())
  item               Item?                           @relation(fields: [itemId], references: [id])
  itemId             String?
  itemValue          String?
  relatedTransaction String?
  signature          String?
  startTime          DateTime?
  status             EnumTransactionStatus?
  transactionHash    String?
  transactionType    EnumTransactionTransactionType?
  updatedAt          DateTime                        @updatedAt
  user               User?                           @relation(fields: [userId], references: [id])
  userId             String?
}

model Network {
  activatedDate DateTime?
  collections   Collection[]
  createdAt     DateTime     @default(now())
  currencies    Currency[]
  id            String       @id @default(cuid())
  name          String       @unique
  networkSymbol String       @unique
  updatedAt     DateTime     @updatedAt
}

model Currency {
  activatedAt      DateTime?
  contractAddress  String?
  createdAt        DateTime      @default(now())
  currencySymbol   String?
  decimals         Int?
  deletedAt        DateTime?
  displayImage     String?
  id               String        @id @default(cuid())
  liquidityAddress String?
  name             String?
  network          Network?      @relation(fields: [networkId], references: [id])
  networkId        String?
  transactions     Transaction[]
  updatedAt        DateTime      @updatedAt
}

enum EnumCollectionProtocolType {
  Erc721
  Erc1155
}

enum EnumTransactionStatus {
  Submitted
  Matched
  Cancelled
  NotMatched
}

enum EnumTransactionTransactionType {
  Bid
  Offer
}