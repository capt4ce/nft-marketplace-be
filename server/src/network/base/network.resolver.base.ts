/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateNetworkArgs } from "./CreateNetworkArgs";
import { UpdateNetworkArgs } from "./UpdateNetworkArgs";
import { DeleteNetworkArgs } from "./DeleteNetworkArgs";
import { NetworkFindManyArgs } from "./NetworkFindManyArgs";
import { NetworkFindUniqueArgs } from "./NetworkFindUniqueArgs";
import { Network } from "./Network";
import { CollectionFindManyArgs } from "../../collection/base/CollectionFindManyArgs";
import { Collection } from "../../collection/base/Collection";
import { CurrencyFindManyArgs } from "../../currency/base/CurrencyFindManyArgs";
import { Currency } from "../../currency/base/Currency";
import { NetworkService } from "../network.service";

@graphql.Resolver(() => Network)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class NetworkResolverBase {
  constructor(
    protected readonly service: NetworkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Network",
    action: "read",
    possession: "any",
  })
  async _networksMeta(
    @graphql.Args() args: NetworkFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Network])
  @nestAccessControl.UseRoles({
    resource: "Network",
    action: "read",
    possession: "any",
  })
  async networks(
    @graphql.Args() args: NetworkFindManyArgs
  ): Promise<Network[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Network, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Network",
    action: "read",
    possession: "own",
  })
  async network(
    @graphql.Args() args: NetworkFindUniqueArgs
  ): Promise<Network | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Network)
  @nestAccessControl.UseRoles({
    resource: "Network",
    action: "create",
    possession: "any",
  })
  async createNetwork(
    @graphql.Args() args: CreateNetworkArgs
  ): Promise<Network> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Network)
  @nestAccessControl.UseRoles({
    resource: "Network",
    action: "update",
    possession: "any",
  })
  async updateNetwork(
    @graphql.Args() args: UpdateNetworkArgs
  ): Promise<Network | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Network)
  @nestAccessControl.UseRoles({
    resource: "Network",
    action: "delete",
    possession: "any",
  })
  async deleteNetwork(
    @graphql.Args() args: DeleteNetworkArgs
  ): Promise<Network | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Collection])
  @nestAccessControl.UseRoles({
    resource: "Collection",
    action: "read",
    possession: "any",
  })
  async collections(
    @graphql.Parent() parent: Network,
    @graphql.Args() args: CollectionFindManyArgs
  ): Promise<Collection[]> {
    const results = await this.service.findCollections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Currency])
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async currencies(
    @graphql.Parent() parent: Network,
    @graphql.Args() args: CurrencyFindManyArgs
  ): Promise<Currency[]> {
    const results = await this.service.findCurrencies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
